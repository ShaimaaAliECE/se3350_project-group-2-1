{"ast":null,"code":"import generateArray from '../arrayGenerator.js';\nlet steps = []; // Merges two subarrays of arr[].\n// First subarray is arr[l..m]\n// Second subarray is arr[m+1..r]\n\nfunction merge(arr1, arr2) {\n  steps.push(['Merging', arr1, arr2]); // Create temp array\n\n  var arr = []; // Initial index of first subarray\n  // Initial index of second subarray\n  // Initial index of merged subarray\n\n  var i = 0;\n  var j = 0;\n  var k = 0;\n\n  while (i < arr1.length && j < arr2.length) {\n    if (arr1[i] <= arr2[j]) {\n      arr.push(arr1[i]);\n      i++;\n    } else {\n      arr[k] = arr2[j];\n      j++;\n    }\n\n    k++;\n  } // Copy the remaining elements of\n  // L[], if there are any\n\n\n  while (i < arr1.length) {\n    arr.push(arr1[i]);\n    i++;\n    k++;\n  } // Copy the remaining elements of\n  // R[], if there are any\n\n\n  while (j < arr2.length) {\n    arr.push(arr2[j]);\n    j++;\n    k++;\n  }\n\n  return arr;\n} // l is for left index and r is\n// right index of the sub-array\n// of arr to be sorted */\n\n\nfunction mergeSort(arr, l, r) {\n  steps.push(['Step Down', arr]);\n\n  if (l >= r) {\n    return [arr[l]]; //returns recursively\n  }\n\n  var m = l + parseInt((r - l) / 2);\n  const arr1 = arr.slice(l, m + 1);\n  const arr2 = arr.slice(m + 1, r + 1);\n  const mergedArr1 = mergeSort(arr1, 0, arr1.length - 1);\n  const mergedArr2 = mergeSort(arr2, 0, arr2.length - 1);\n  const mergedArray = merge(mergedArr1, mergedArr2);\n  steps.push(['Merged', mergedArray]);\n  return mergedArray;\n}\n\nfunction MergeSort(size, range) {\n  steps = [];\n  const generatedArray = generateArray(size, 0, range);\n  steps.push(['Start', generatedArray]);\n  const result = mergeSort(generatedArray, 0, generatedArray.length - 1);\n  steps.push(['Final', result]);\n  return steps;\n}\n\n_c = MergeSort;\nexport default MergeSort;\n\nvar _c;\n\n$RefreshReg$(_c, \"MergeSort\");","map":{"version":3,"sources":["/Users/Andy/Documents/GitHub/se3350_project-group-2-1/src/utils/sorting/MergeSort.js"],"names":["generateArray","steps","merge","arr1","arr2","push","arr","i","j","k","length","mergeSort","l","r","m","parseInt","slice","mergedArr1","mergedArr2","mergedArray","MergeSort","size","range","generatedArray","result"],"mappings":"AAAA,OAAOA,aAAP,MAA0B,sBAA1B;AACA,IAAIC,KAAK,GAAG,EAAZ,C,CAEA;AACA;AACA;;AACA,SAASC,KAAT,CAAeC,IAAf,EAAqBC,IAArB,EACA;AACIH,EAAAA,KAAK,CAACI,IAAN,CAAW,CAAC,SAAD,EAAWF,IAAX,EAAgBC,IAAhB,CAAX,EADJ,CAEI;;AACA,MAAIE,GAAG,GAAG,EAAV,CAHJ,CAKI;AACA;AACA;;AACA,MAAIC,CAAC,GAAG,CAAR;AACA,MAAIC,CAAC,GAAG,CAAR;AACA,MAAIC,CAAC,GAAG,CAAR;;AAEA,SAAOF,CAAC,GAAGJ,IAAI,CAACO,MAAT,IAAmBF,CAAC,GAAGJ,IAAI,CAACM,MAAnC,EAA2C;AACvC,QAAIP,IAAI,CAACI,CAAD,CAAJ,IAAWH,IAAI,CAACI,CAAD,CAAnB,EAAwB;AACpBF,MAAAA,GAAG,CAACD,IAAJ,CAASF,IAAI,CAACI,CAAD,CAAb;AACAA,MAAAA,CAAC;AACJ,KAHD,MAIK;AACDD,MAAAA,GAAG,CAACG,CAAD,CAAH,GAASL,IAAI,CAACI,CAAD,CAAb;AACAA,MAAAA,CAAC;AACJ;;AACDC,IAAAA,CAAC;AACJ,GAtBL,CAwBI;AACA;;;AACA,SAAOF,CAAC,GAAGJ,IAAI,CAACO,MAAhB,EAAwB;AACpBJ,IAAAA,GAAG,CAACD,IAAJ,CAASF,IAAI,CAACI,CAAD,CAAb;AACAA,IAAAA,CAAC;AACDE,IAAAA,CAAC;AACJ,GA9BL,CAgCI;AACA;;;AACA,SAAOD,CAAC,GAAGJ,IAAI,CAACM,MAAhB,EAAwB;AACpBJ,IAAAA,GAAG,CAACD,IAAJ,CAASD,IAAI,CAACI,CAAD,CAAb;AACAA,IAAAA,CAAC;AACDC,IAAAA,CAAC;AACJ;;AAED,SAAOH,GAAP;AACH,C,CAED;AACA;AACA;;;AACA,SAASK,SAAT,CAAmBL,GAAnB,EAAuBM,CAAvB,EAA0BC,CAA1B,EAA4B;AACxBZ,EAAAA,KAAK,CAACI,IAAN,CAAW,CAAC,WAAD,EAAaC,GAAb,CAAX;;AACA,MAAGM,CAAC,IAAEC,CAAN,EAAQ;AACJ,WAAO,CAACP,GAAG,CAACM,CAAD,CAAJ,CAAP,CADI,CACY;AACnB;;AAED,MAAIE,CAAC,GAAGF,CAAC,GAAGG,QAAQ,CAAC,CAACF,CAAC,GAACD,CAAH,IAAM,CAAP,CAApB;AACA,QAAMT,IAAI,GAAGG,GAAG,CAACU,KAAJ,CAAUJ,CAAV,EAAaE,CAAC,GAAC,CAAf,CAAb;AACA,QAAMV,IAAI,GAAGE,GAAG,CAACU,KAAJ,CAAUF,CAAC,GAAC,CAAZ,EAAeD,CAAC,GAAC,CAAjB,CAAb;AACA,QAAMI,UAAU,GAAGN,SAAS,CAACR,IAAD,EAAO,CAAP,EAAUA,IAAI,CAACO,MAAL,GAAa,CAAvB,CAA5B;AACA,QAAMQ,UAAU,GAAGP,SAAS,CAACP,IAAD,EAAM,CAAN,EAASA,IAAI,CAACM,MAAL,GAAc,CAAvB,CAA5B;AAEA,QAAMS,WAAW,GAAGjB,KAAK,CAACe,UAAD,EAAYC,UAAZ,CAAzB;AACAjB,EAAAA,KAAK,CAACI,IAAN,CAAW,CAAC,QAAD,EAAUc,WAAV,CAAX;AAEA,SAAOA,WAAP;AACH;;AAED,SAASC,SAAT,CAAmBC,IAAnB,EAAwBC,KAAxB,EAA8B;AAC1BrB,EAAAA,KAAK,GAAG,EAAR;AACA,QAAMsB,cAAc,GAAGvB,aAAa,CAACqB,IAAD,EAAM,CAAN,EAAQC,KAAR,CAApC;AACArB,EAAAA,KAAK,CAACI,IAAN,CAAW,CAAC,OAAD,EAAUkB,cAAV,CAAX;AAEA,QAAMC,MAAM,GAAGb,SAAS,CAACY,cAAD,EAAiB,CAAjB,EAAoBA,cAAc,CAACb,MAAf,GAAuB,CAA3C,CAAxB;AACAT,EAAAA,KAAK,CAACI,IAAN,CAAW,CAAC,OAAD,EAAUmB,MAAV,CAAX;AAEA,SAAOvB,KAAP;AACH;;KATQmB,S;AAUT,eAAeA,SAAf","sourcesContent":["import generateArray from '../arrayGenerator.js';\nlet steps = [];\n\n// Merges two subarrays of arr[].\n// First subarray is arr[l..m]\n// Second subarray is arr[m+1..r]\nfunction merge(arr1, arr2)\n{\n    steps.push(['Merging',arr1,arr2]);\n    // Create temp array\n    var arr = []; \n  \n    // Initial index of first subarray\n    // Initial index of second subarray\n    // Initial index of merged subarray\n    var i = 0;\n    var j = 0;\n    var k = 0;\n  \n    while (i < arr1.length && j < arr2.length) {\n        if (arr1[i] <= arr2[j]) {\n            arr.push(arr1[i]);\n            i++;\n        }\n        else {\n            arr[k] = arr2[j];\n            j++;\n        }\n        k++;\n    }\n  \n    // Copy the remaining elements of\n    // L[], if there are any\n    while (i < arr1.length) {\n        arr.push(arr1[i]);\n        i++;\n        k++;\n    }\n  \n    // Copy the remaining elements of\n    // R[], if there are any\n    while (j < arr2.length) {\n        arr.push(arr2[j]);\n        j++;\n        k++;\n    }\n\n    return arr;\n}\n  \n// l is for left index and r is\n// right index of the sub-array\n// of arr to be sorted */\nfunction mergeSort(arr,l, r){\n    steps.push(['Step Down',arr]);\n    if(l>=r){\n        return [arr[l]];//returns recursively\n    }\n\n    var m = l + parseInt((r-l)/2);\n    const arr1 = arr.slice(l, m+1);\n    const arr2 = arr.slice(m+1, r+1);\n    const mergedArr1 = mergeSort(arr1, 0, arr1.length -1); \n    const mergedArr2 = mergeSort(arr2,0, arr2.length - 1);\n\n    const mergedArray = merge(mergedArr1,mergedArr2);\n    steps.push(['Merged',mergedArray]);\n\n    return mergedArray;\n}\n\nfunction MergeSort(size,range){\n    steps = [];\n    const generatedArray = generateArray(size,0,range);\n    steps.push(['Start', generatedArray]);\n\n    const result = mergeSort(generatedArray, 0, generatedArray.length -1);\n    steps.push(['Final', result]);\n\n    return steps;\n}\nexport default MergeSort;\n\n"]},"metadata":{},"sourceType":"module"}