{"ast":null,"code":"var _jsxFileName = \"/Users/Andy/Documents/GitHub/se3350_project-group-2-1/src/components/ArrayGroup.jsx\",\n    _s2 = $RefreshSig$();\n\nimport { Button, Grid, Alert, Snackbar } from \"@mui/material\";\nimport { useEffect, useState, useRef } from \"react\";\nimport { ArrayStates } from \"../utils/GameTypes\";\nimport useSound from 'use-sound'; // for sound fx\n\nimport successSound from '../checkAudio.mp3';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ArrayGroup(props) {\n  _s2();\n\n  var _s = $RefreshSig$();\n\n  // State initialization\n  const [arrayState, setArrayState] = useState(props.numArray.length === 1 ? ArrayStates.MERGED : ArrayStates.UNSORTED);\n  const [mergedArray, setMergedArray] = useState(props.numArray.length == 1 ? [...props.numArray] : []); // Empty array to eventually be populated with the properly sorted values\n\n  const [childArrays, setChildArrays] = useState(); // To hold ArrayGroup instances for the left and right sub-arrays (children)\n\n  const [gameTime, setGameTime] = useState();\n  const [level, setLevel] = useState(props.level);\n  /**\n   * Updates the merged list with a new value selected from child array\n   * @param {number} value \n   */\n\n  function pushToMerged(value) {\n    setMergedArray([...mergedArray, value]);\n  }\n  /**\n   * Handle \"Split Array\" button click event\n   */\n\n\n  function splitArray() {\n    let splitIndex = Math.ceil(props.numArray.length / 2); // Index of the number to the left of the middle\n\n    let leftArrayNums = props.numArray.slice(0, splitIndex);\n    let rightArrayNums = props.numArray.slice(splitIndex, props.numArray.length);\n    setChildArrays({\n      leftArray: leftArrayNums,\n      rightArray: rightArrayNums\n    });\n    setArrayState(ArrayStates.LEFT_SORTING);\n  }\n  /**\n   * Callback function to handle array element button onclick event\n   * @param {number} value \n   */\n\n\n  function selectValue(el) {\n    let value = parseInt(el.target.getAttribute(\"value\"), 10);\n    props.pushToMerged(value);\n    el.target.style.display = \"none\";\n  }\n\n  function delay(time) {\n    return new Promise(res => {\n      setTimeout(res, time);\n    });\n  }\n  /**\n   * When the component is re-rendered (due to a change in state), check to see if the array has been successfully merged\n   */\n\n\n  useEffect(_ => {\n    let isMerged = false;\n\n    if (mergedArray.length == props.numArray.length) {\n      setArrayState(ArrayStates.MERGED);\n      isMerged = true;\n    } // Update the parent state appropriately\n\n\n    if (arrayState === ArrayStates.MERGED || isMerged) {\n      // If merging is complete, allow user to select numbers for upper-level merging\n      if (props.label === \"Left Array\" && props.parentState !== ArrayStates.MERGING) {\n        if (props.numArray.length === 1) {\n          props.setParentState(ArrayStates.MERGING);\n        } else {\n          props.setParentState(ArrayStates.RIGHT_SORTING);\n        }\n      } else if (props.label === \"Right Array\" && props.parentState === ArrayStates.RIGHT_SORTING) {\n        props.setParentState(ArrayStates.MERGING);\n      }\n    }\n  }, [mergedArray.length, props.numArray.length, props.parentState]);\n  let splitArrayButton; // Only display the \"Split Array\" button if the array is unsorted\n\n  let arrayBlocks = []; // Stores array of components corresponding to each number in the array (only render when not merging)\n\n  let children; // Only display child arrays if merging\n\n  let mergedArrayLabel; // Shows the values currently in the merged array (when applicable)\n\n  if (arrayState === ArrayStates.UNSORTED) {\n    if (props.depth === 0 && gameTime === undefined) {\n      setGameTime(new Date().getTime());\n    } // When not ready to merge, present option to split array\n\n\n    let splitArrayDisabled = false;\n\n    if (props.parentState === ArrayStates.LEFT_SORTING && props.label === \"Right Array\") {\n      splitArrayDisabled = true;\n    }\n\n    if (level == 1) {\n      delay(500).then(() => {\n        splitArrayDisabled = true;\n        splitArray();\n\n        for (let i = 0; i < props.numArray.length; i++) {\n          let elementKey = `${props.index}-${i}`; // Unique identifier structure: {array key} - {element index}\n\n          arrayBlocks.push([/*#__PURE__*/_jsxDEV(Button, {\n            disabled: arrayState !== ArrayStates.MERGED,\n            value: props.numArray[i],\n            onClick: selectValue,\n            variant: \"outlined\",\n            children: props.numArray[i]\n          }, elementKey, false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 21\n          }, this)]);\n        }\n      });\n    }\n\n    splitArrayButton = /*#__PURE__*/_jsxDEV(Button, {\n      disabled: splitArrayDisabled,\n      onClick: splitArray,\n      variant: \"contained\",\n      children: \"Split\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 29\n    }, this);\n\n    for (let i = 0; i < props.numArray.length; i++) {\n      let elementKey = `${props.index}-${i}`; // Unique identifier structure: {array key} - {element index}\n\n      arrayBlocks.push([/*#__PURE__*/_jsxDEV(Button, {\n        disabled: arrayState !== ArrayStates.MERGED,\n        value: props.numArray[i],\n        onClick: selectValue,\n        variant: \"outlined\",\n        children: props.numArray[i]\n      }, elementKey, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 17\n      }, this)]);\n    }\n  } else if (arrayState === ArrayStates.MERGED) {\n    for (let i = 0; i < mergedArray.length; i++) {\n      let elementKey = `${props.index}-${i}`; // Unique identifier structure: {array key} - {element index}\n\n      arrayBlocks.push([/*#__PURE__*/_jsxDEV(Button, {\n        disabled: props.parentState !== ArrayStates.MERGING,\n        value: mergedArray[i],\n        onClick: selectValue,\n        variant: \"outlined\",\n        children: mergedArray[i]\n      }, elementKey, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 17\n      }, this)]);\n    }\n  } else if (arrayState === ArrayStates.MERGING) {\n    // If the child arrays are merging into the parent, display the mergedArray numbers as buttons (or instruction text if nothing has merged yet)\n    if (mergedArray.length === 0) {\n      mergedArrayLabel = /*#__PURE__*/_jsxDEV(Button, {\n        disabled: true,\n        variant: \"outlined\",\n        children: \"Click Numbers to Merge\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 32\n      }, this);\n    } else {\n      mergedArrayLabel = mergedArray.map((el, i) => {\n        return /*#__PURE__*/_jsxDEV(Button, {\n          disabled: true,\n          variant: \"outlined\",\n          children: el\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 24\n        }, this);\n      });\n    }\n  } else if (arrayState === ArrayStates.LEFT_SORTING || arrayState === ArrayStates.RIGHT_SORTING) {\n    mergedArrayLabel = /*#__PURE__*/_jsxDEV(Button, {\n      disabled: true,\n      variant: \"outlined\",\n      children: \"Sort Child Arrays\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 28\n    }, this);\n  }\n\n  let timeAlert;\n\n  const useAudioCorrect = () => {\n    _s();\n\n    let correctAlert = useSound(successSound); // correct sound fx\n  };\n  /*\n      Handling for closing out snackbars\n  */\n\n\n  _s(useAudioCorrect, \"qhHYR7j7bU9qrrpNOc6EhzhTTHc=\", false, function () {\n    return [useSound];\n  });\n\n  const [open, setOpen] = useState(true);\n\n  const handleClose = (event, reason) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n\n    setOpen(false);\n  };\n\n  function validateArray() {\n    //validate that the root array is in ascending sequence to complete game properly\n    for (let i = 1; i < mergedArray.length; i++) {\n      let elementValue = mergedArray[i];\n      let prevElementValue = mergedArray[i - 1];\n\n      if (prevElementValue > elementValue) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  if (arrayState === ArrayStates.MERGED) {\n    if (props.depth === 0) {\n      let timeDelta = (new Date().getTime() - gameTime) / 1000; // from the time level 0 is presented till full sort\n\n      let successMsg = '';\n\n      if (level === 3) {\n        //Level 2 on screen (level 3 in the level variable) - will do the valiation - otherwise always valid.\n        if (validateArray()) {\n          successMsg = ' seconds to complete!';\n        } else {\n          successMsg = ' seconds to complete! But the Game Failed';\n        }\n      } else {\n        successMsg = ' seconds to complete!';\n      }\n\n      audioCorrect();\n      timeAlert = /*#__PURE__*/_jsxDEV(Snackbar, {\n        open: open,\n        autoHideDuration: 6000,\n        onClose: handleClose,\n        children: /*#__PURE__*/_jsxDEV(Alert, {\n          onClose: handleClose,\n          severity: \"success\",\n          sx: {\n            width: '100%'\n          },\n          children: timeDelta + successMsg\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 25\n      }, this); // green popup on \n\n      props.gameRunning.current = false;\n    }\n  } // Render child arrays if not in merged state\n\n\n  if (childArrays !== undefined) {\n    if (arrayState !== ArrayStates.MERGED) {\n      children = /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 6,\n          children: /*#__PURE__*/_jsxDEV(ArrayGroup, {\n            parentState: arrayState,\n            setParentState: setArrayState,\n            label: \"Left Array\",\n            depth: props.depth + 1,\n            mergedArray: mergedArray,\n            pushToMerged: pushToMerged,\n            numArray: childArrays.leftArray\n          }, 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 202,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 6,\n          children: /*#__PURE__*/_jsxDEV(ArrayGroup, {\n            parentState: arrayState,\n            setParentState: setArrayState,\n            label: \"Right Array\",\n            depth: props.depth + 1,\n            mergedArray: mergedArray,\n            pushToMerged: pushToMerged,\n            numArray: childArrays.rightArray\n          }, 1, false, {\n            fileName: _jsxFileName,\n            lineNumber: 205,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 24\n      }, this);\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"array-group\",\n    children: [/*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      children: [timeAlert, /*#__PURE__*/_jsxDEV(Grid, {\n        className: \"array-group-header\",\n        item: true,\n        xs: 12,\n        children: /*#__PURE__*/_jsxDEV(\"h4\", {\n          children: props.label\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        className: \"array-group-header\",\n        item: true,\n        xs: 12,\n        children: splitArrayButton\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      className: \"array-group-body\",\n      container: true,\n      children: [mergedArrayLabel, arrayBlocks, children]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 212,\n    columnNumber: 9\n  }, this);\n}\n\n_s2(ArrayGroup, \"7bVJI17RcsoAqUET/fqIVNyQGSw=\");\n\n_c = ArrayGroup;\n\nvar _c;\n\n$RefreshReg$(_c, \"ArrayGroup\");","map":{"version":3,"sources":["/Users/Andy/Documents/GitHub/se3350_project-group-2-1/src/components/ArrayGroup.jsx"],"names":["Button","Grid","Alert","Snackbar","useEffect","useState","useRef","ArrayStates","useSound","successSound","ArrayGroup","props","arrayState","setArrayState","numArray","length","MERGED","UNSORTED","mergedArray","setMergedArray","childArrays","setChildArrays","gameTime","setGameTime","level","setLevel","pushToMerged","value","splitArray","splitIndex","Math","ceil","leftArrayNums","slice","rightArrayNums","leftArray","rightArray","LEFT_SORTING","selectValue","el","parseInt","target","getAttribute","style","display","delay","time","Promise","res","setTimeout","_","isMerged","label","parentState","MERGING","setParentState","RIGHT_SORTING","splitArrayButton","arrayBlocks","children","mergedArrayLabel","depth","undefined","Date","getTime","splitArrayDisabled","then","i","elementKey","index","push","map","timeAlert","useAudioCorrect","correctAlert","open","setOpen","handleClose","event","reason","validateArray","elementValue","prevElementValue","timeDelta","successMsg","audioCorrect","width","gameRunning","current"],"mappings":"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","sourcesContent":["import { Button, Grid, Alert,Snackbar } from \"@mui/material\";\nimport { useEffect, useState, useRef } from \"react\"\nimport { ArrayStates } from \"../utils/GameTypes\";\nimport useSound from 'use-sound'; // for sound fx\nimport successSound from '../checkAudio.mp3';\n\nexport default function ArrayGroup(props) {\n    // State initialization\n    const [arrayState, setArrayState] = useState(props.numArray.length === 1 ? ArrayStates.MERGED : ArrayStates.UNSORTED);\n    const [mergedArray, setMergedArray] = useState(props.numArray.length == 1 ? [...props.numArray] : []); // Empty array to eventually be populated with the properly sorted values\n    const [childArrays, setChildArrays] = useState(); // To hold ArrayGroup instances for the left and right sub-arrays (children)\n    const[gameTime, setGameTime] = useState();\n    const [level, setLevel] = useState(props.level);\n\n    /**\n     * Updates the merged list with a new value selected from child array\n     * @param {number} value \n     */\n    function pushToMerged(value) {\n        setMergedArray([...mergedArray, value]);\n    }\n    \n    /**\n     * Handle \"Split Array\" button click event\n     */\n    function splitArray() {\n        let splitIndex = Math.ceil(props.numArray.length / 2); // Index of the number to the left of the middle\n        let leftArrayNums = props.numArray.slice(0, splitIndex);\n        let rightArrayNums = props.numArray.slice(splitIndex, props.numArray.length);\n        \n        setChildArrays({\n            leftArray: leftArrayNums,\n            rightArray: rightArrayNums\n        });\n        setArrayState(ArrayStates.LEFT_SORTING);\n    }\n\n    /**\n     * Callback function to handle array element button onclick event\n     * @param {number} value \n     */\n    function selectValue(el) {\n        let value = parseInt(el.target.getAttribute(\"value\"), 10);\n        props.pushToMerged(value);\n        el.target.style.display = \"none\";\n    }\n\n    function delay(time) {\n        return new Promise(res => {\n          setTimeout(res,time)\n        })\n      }\n\n    /**\n     * When the component is re-rendered (due to a change in state), check to see if the array has been successfully merged\n     */\n    useEffect(_ => {\n        let isMerged = false;\n        if (mergedArray.length == props.numArray.length) {\n            setArrayState(ArrayStates.MERGED);\n            isMerged = true;\n        }\n        // Update the parent state appropriately\n        if (arrayState === ArrayStates.MERGED || isMerged) {\n            // If merging is complete, allow user to select numbers for upper-level merging\n            if (props.label === \"Left Array\" && props.parentState !== ArrayStates.MERGING) {\n                if (props.numArray.length === 1) {\n                    props.setParentState(ArrayStates.MERGING);\n                } else {\n                    props.setParentState(ArrayStates.RIGHT_SORTING);\n                }\n            } else if (props.label === \"Right Array\" && props.parentState === ArrayStates.RIGHT_SORTING) {\n                props.setParentState(ArrayStates.MERGING);\n            }\n        }\n    }, [mergedArray.length, props.numArray.length, props.parentState]);\n\n\n    let splitArrayButton; // Only display the \"Split Array\" button if the array is unsorted\n    let arrayBlocks = []; // Stores array of components corresponding to each number in the array (only render when not merging)\n    let children; // Only display child arrays if merging\n    let mergedArrayLabel; // Shows the values currently in the merged array (when applicable)\n    if (arrayState === ArrayStates.UNSORTED) {\n        if (props.depth === 0 && gameTime === undefined) {\n            setGameTime(new Date().getTime());\n        }\n        // When not ready to merge, present option to split array\n        let splitArrayDisabled = false;\n        if (props.parentState === ArrayStates.LEFT_SORTING && props.label === \"Right Array\") {\n            splitArrayDisabled = true;\n        }\n        if (level == 1) {\n            delay(500).then(() => {\n            splitArrayDisabled = true;\n            splitArray();\n            for (let i = 0; i < props.numArray.length; i++) {\n                let elementKey = `${props.index}-${i}`; // Unique identifier structure: {array key} - {element index}\n                arrayBlocks.push([\n                    <Button disabled={arrayState !== ArrayStates.MERGED} key={elementKey} value={props.numArray[i]} onClick={selectValue} variant=\"outlined\">{props.numArray[i]}</Button>\n                ]);\n            }\n            })\n        }\n        splitArrayButton = (<Button disabled={splitArrayDisabled} onClick={splitArray} variant=\"contained\">Split</Button>);\n\n        for (let i = 0; i < props.numArray.length; i++) {\n            let elementKey = `${props.index}-${i}`; // Unique identifier structure: {array key} - {element index}\n            arrayBlocks.push([\n                <Button disabled={arrayState !== ArrayStates.MERGED} key={elementKey} value={props.numArray[i]} onClick={selectValue} variant=\"outlined\">{props.numArray[i]}</Button>\n            ]);\n        }\n    } else if (arrayState === ArrayStates.MERGED) {\n        \n        for (let i = 0; i < mergedArray.length; i++) {\n            let elementKey = `${props.index}-${i}`; // Unique identifier structure: {array key} - {element index}\n            arrayBlocks.push([\n                <Button disabled={props.parentState !== ArrayStates.MERGING} key={elementKey} value={mergedArray[i]} onClick={selectValue} variant=\"outlined\">{mergedArray[i]}</Button>\n            ]);\n        }\n    } else if (arrayState === ArrayStates.MERGING) {\n        // If the child arrays are merging into the parent, display the mergedArray numbers as buttons (or instruction text if nothing has merged yet)\n        if (mergedArray.length === 0) {\n            mergedArrayLabel = <Button disabled={true} variant=\"outlined\">Click Numbers to Merge</Button>\n        } else {\n            mergedArrayLabel = mergedArray.map((el, i) => {\n                return <Button disabled={true} key={i} variant=\"outlined\">{el}</Button>\n            });\n        }\n    } else if (arrayState === ArrayStates.LEFT_SORTING || arrayState === ArrayStates.RIGHT_SORTING) {\n        mergedArrayLabel = <Button disabled={true} variant=\"outlined\">Sort Child Arrays</Button>\n    }\n\n    let timeAlert;\n    \n    const useAudioCorrect = () => {\n        let correctAlert = useSound(successSound); // correct sound fx\n        \n    }\n    \n    /*\n        Handling for closing out snackbars\n    */\n\n    const [open, setOpen] = useState(true);\n\n    const handleClose = (event, reason) => {\n        if (reason === 'clickaway') {\n        return;\n        }\n\n        setOpen(false);\n    };\n\n    function validateArray() { //validate that the root array is in ascending sequence to complete game properly\n\n        for (let i = 1; i < mergedArray.length; i++) {\n            let elementValue = mergedArray[i];\n            let prevElementValue = mergedArray[i-1];\n            if  (prevElementValue > elementValue) {\n                return(false);\n            }\n\n        }        \n\n        return(true);\n\n    }\n    \n    if (arrayState === ArrayStates.MERGED) {\n        if (props.depth === 0) {\n            let timeDelta = (new Date().getTime() - gameTime) / 1000; // from the time level 0 is presented till full sort\n            let successMsg = '';\n            if  (level === 3) {  //Level 2 on screen (level 3 in the level variable) - will do the valiation - otherwise always valid.\n                if  (validateArray()) {\n                    successMsg = ' seconds to complete!';\n                }\n                else {\n                    successMsg = ' seconds to complete! But the Game Failed';\n                }\n            }\n            else {\n                successMsg = ' seconds to complete!';\n            }\n\n            audioCorrect();\n\n            timeAlert = <Snackbar open={open} autoHideDuration={6000} onClose={handleClose}>\n                <Alert onClose={handleClose} severity=\"success\" sx={{ width: '100%' }}>\n                    {timeDelta + successMsg}\n                </Alert>\n            \n            </Snackbar> // green popup on \n            props.gameRunning.current = false;\n        }\n    }\n\n    // Render child arrays if not in merged state\n    if (childArrays !== undefined) {\n        if (arrayState !== ArrayStates.MERGED) {\n            children = <Grid container>\n                <Grid item xs={6}>\n                    <ArrayGroup parentState={arrayState} setParentState={setArrayState} label=\"Left Array\" depth={props.depth + 1} key={0} mergedArray={mergedArray} pushToMerged={pushToMerged} numArray={childArrays.leftArray} />\n                </Grid>\n                <Grid item xs={6}>\n                    <ArrayGroup parentState={arrayState} setParentState={setArrayState} label=\"Right Array\" depth={props.depth + 1} key={1} mergedArray={mergedArray} pushToMerged={pushToMerged} numArray={childArrays.rightArray} />\n                </Grid>\n            </Grid>\n        }\n    }\n\n    return (\n        <div className=\"array-group\">\n            <Grid container>\n                \n                {timeAlert}\n                <Grid className=\"array-group-header\" item xs={12}>\n                    <h4>{props.label}</h4>\n                </Grid>\n                <Grid className=\"array-group-header\" item xs={12}>\n                    {splitArrayButton}\n                </Grid>\n            </Grid>\n            <Grid className=\"array-group-body\" container>\n                {mergedArrayLabel}\n                {arrayBlocks}\n                {children}\n            </Grid>\n        </div>\n    )\n}"]},"metadata":{},"sourceType":"module"}